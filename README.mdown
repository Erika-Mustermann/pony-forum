Pony-Forum on DotCloud
----------------------
Pony-Forum is a forum (also known as a bulletin board) written in Python for the Django framework.

Installation
------------
One of the ideas behind Pony-Forum was to create a forum that is *easily* deployed with little head-scratching. At the moment [DotCloud](https://dotcloud.com) accommodates this goal and allows us to deploy a whole working forum to a DotCloud instance using only these three terminal commands:

    git clone git@github.com:ndarville/dotcloud-django.git
    dotcloud create hellodjango
    dotcloud push hellodjango

The `hellodjango` name is temporary and can be replaced with any other name. In the future, it will be probably be renamed to `forum` or `pony-forum` in the future.

You will also need to set up an e-mail server (which is very, very easy), all of which is explained in *Setting Up an E-Mail Server* later on in this README. Fret not.

The results on Windows 7 have been uneven at best, but if you want to try your luck, you can install the DotCloud dependencies DotCloud can be installed using either [DotCloud's own installation instructions](http://docs.dotcloud.com/firststeps/install/) (not recommended) compared to just downloading and executing [DotCloudWin](https://github.com/speier/DotCloudWin/downloads). Users on other platforms can use DotCloud's installation guide to set it up with no hitches.

Remember to [sign up](https://www.dotcloud.com/accounts/register/) for free on DotCloud, if you don't already have an account, in order to retrieve your API key.

After-Installation Instructions
-------------------------------
### The Default "Admin" ###
When the forum is first deployed on DotCloud, an `admin` user is created and assigned a default password (wait for it): `"password"`. This is done through the [mkadmin.py](https://github.com/ndarville/dotcloud-django/blob/master/mkadmin.py) script, which is called by [postinstall](https://github.com/ndarville/dotcloud-django/blob/master/postinstall) if you want have a look under the bonnet.

Normally, you get to create your own admin, when the database is created, but since this happens automagically behind the scenes, you will not be able to enter your own credentials. Instead, you will have to change the password and details for the `admin` user to suit your own needs or create your own user(s) and dispose of the default admin user.

The important thing here is to tell you that **all deployed pony-forums will have the same password**. This is fine, but you will eventually need to prevent other people from hijacking the `admin` user and wreaking havoc by either changing the user's password (done at `/admin/auth/user/1/password/`) or stripping the user of its `staff` and `superuser` status.

Just make sure you have another admin-like user ready, so you don't lock yourself out. If you do, you can always wipe and recreate the forum with these commands:

    dotcloud destroy hellodjango
    dotcloud create hellodjango
    dotcloud push hellodjango

### Your Site Name ###
Speaking of automatic changes, Pony-Forum guesses the name and domain of your website based on respectively

1. Your DotCloud project name
2. The URL for you DotCloud instance

How all this is done can be seen in [definesite.py](https://github.com/ndarville/dotcloud-django/blob/master/definesite.py), which is (also) called in `postinstall`.

"So what?" you ask; what are these used for? As it happens, as of this writing, the name of your site is only relevant, if you want the name to appear in the header in the top middle of your forum. Besides that, it doesn't appear anywhere, really.

The *domain* on the other hand is much more important. It is used for in the `userena` app that, amongst other things, sends activation e-mails to your users. As you may know, these e-mails contain an activation link that your users have to follow in order to activate their accounts.

But how does Pony-Forum know which site the link points to? You guessed it, it uses the `domain` defined by `definesite.py`.

If you need to change these two fields---for instance, if you were to give your forum a better-looking URL---you will need to change the `domain` field. This can be done at `/admin/sites/site/1/`.

### Setting Up an E-Mail Server ###
*Speakiiing* of activation e-mails, you need to, you know, send e-mails. "Jesus &"Â¤!#! Christ!" you think to yourself, but if you use a Gmail account, it's all actually quite easy! (I was surprised, too.)

Using [sontek's intelligible guide](http://sontek.net/using-gmail-to-send-e-mails-from-django), you can define your own e-mail server by including this part in your `settings.py` file:

    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = 'user@gmail.com'
    EMAIL_HOST_PASSWORD = 'password'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    
Obviously, you need to change the USER and PASSWORD fields to your own settings. Also note that if you are using Google's [two-factor authentication](https://account.google.com/SmsAuthConfig/), you default password will not work, because you need to create a designated application password for it [here](https://account.google.com/SmsAuthConfig/).

If you aren't already using two-factor authentication, I urge you to do it to improve your Google and Gmail security significantly, but I'll talk your ear off about that another time.

After you have changed and saved your new settings in `settings.py`, run the `dotcloud push hellodjango` command again, and your new settings will be (derp) pushed to your instance. If nothing happens, follow it up with the command `dotcloud restart hellodjango.www`.

### Aaand You're Done! ###
Let's recapitulate the adjustments needed to set up Pony-Forum:

1. Clone, create, push.
2. Change the default admin `"password"' password.
3. Check that your defined site name and domain match your intended name and used URL.
4. Set up your e-mail server.

Boom! You're done.

To-Do List
----------
Fire up [some music](http://soundcloud.com/pluxemburg/first-floor-power-to-do-list-akamu-remix) and let's take a look at what I hope to get to at some point.

0. Markdown footnotes!!!
1. (Forced) HTTPS for account-based views
2. Subscriptions
3. Bans
4. Avatars
5. Pagination

* Formatting buttons
* Thread polls
* Private messages (PMs)

* Views and templates:
    * Bookmarks/Saves
    * Settings

* Members-only threads, categories, and forums
* CSS
    * Mobile
    * Print

* Unit testing
* (Better) caching
* Finite log-in attempts

### Features Under Consideration ###
* UTC-based datetimes
* Post edit time stamps
* [LaTeX/MathML support](http://mathjax.org)
* Synthax highlighting
* [Markdown Video](http://tylerlesmann.com/2008/jul/25/smart-way-implementing-markdown-django)
* Post and thread drafts
    * HTML5 storage?

And much, much more.
