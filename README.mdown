Pony Forum on DotCloud
======================
Pony Forum is a forum (also known as a bulletin board) written in Python for the Django framework. It is intended as a replacement of the decade-old forums like vBulletin, PHPBB, etc.---and a free one easy to deploy at that.

Installation
------------
One of the ideas behind Pony Forum was to create a forum that is *easily* deployed with little head-scratching. At the moment [DotCloud](https://dotcloud.com) accommodates this goal and allows us to deploy a whole working forum to a DotCloud instance using only these three terminal commands:

    git clone git@github.com:ndarville/dotcloud-django.git
    dotcloud create ponyforum
    dotcloud push ponyforum

The `ponyforum` name is temporary and can be replaced with any other name. In the future, it will be probably be renamed to `forum` or `pony forum` in the future.

You will also need to set up an e-mail server (which is very, very easy), all of which is explained in *Setting Up an E-Mail Server* later on in this README. Fret not.

The results on Windows 7 have been uneven at best, but if you want to try your luck, you can install the DotCloud dependencies DotCloud can be installed using either [DotCloud's own installation instructions](http://docs.dotcloud.com/firststeps/install/) (not recommended) compared to just downloading and executing [DotCloudWin](https://github.com/speier/DotCloudWin/downloads). Users on other platforms can use DotCloud's installation guide to set it up with no hitches.

Remember to [sign up](https://www.dotcloud.com/accounts/register/) for free on DotCloud, if you don't already have an account, in order to retrieve your API key.

If you want to use your forum locally, remember that you need to install the needed packages. If you have already installed `pip`, you can go to the directory of `requirements.txt` and type `pip install -r requirements.txt` in the terminal (`sudo pip install -r requirements.txt`, if you aren't on Windows), and all the packages will be downloaded and installed on you local development computer.

As said, Windows is a very, very wonky experience, and it seems to take issue with the `PIL` package most of the time for reasons beyond my scant knowledge.

After-Installation Instructions
-------------------------------
### The Default "Admin" ###
When the forum is first deployed on DotCloud, an `admin` user is created and assigned a default password (wait for it): `"password"`. This is done through the [mkadmin.py](https://github.com/ndarville/dotcloud-django/blob/master/_postisntall/mkadmin.py) script, which is called by [postinstall](https://github.com/ndarville/dotcloud-django/blob/master/postinstall) if you want have a look under the bonnet.

Normally, you get to create your own admin, when the database is created, but since this happens automagically behind the scenes, you will not be able to enter your own credentials. Instead, you will have to change the password and details for the `admin` user to suit your own needs or create your own user(s) and dispose of the default admin user.

The important thing here is to tell you that **all deployed pony forums will have the same password**. This is fine, but you will eventually need to prevent other people from hijacking the `admin` user and wreaking havoc by either changing the user's password (done at `/admin/auth/user/1/password/`) or stripping the user of its `staff` and `superuser` status.

Just make sure you have another admin-like user ready, so you don't lock yourself out. If you do, you can always wipe and recreate the forum with these commands:

    dotcloud destroy ponyforum
    dotcloud create ponyforum
    dotcloud push ponyforum

### Your Site Name ###
Speaking of automatic changes, Pony Forum guesses the name and domain of your website based on respectively

1. Your DotCloud project name
2. The URL for you DotCloud instance

How all this is done can be seen in [definesite.py](https://github.com/ndarville/dotcloud-django/blob/master/_postinstall/definesite.py), which is (also) called in `postinstall`.

"So what?" you ask; what are these used for? As it happens, as of this writing, the name of your site is only relevant, if you want the name to appear in the header in the top middle of your forum<sup>**1**</sup> Besides that, it doesn't appear anywhere, really.

The *domain* on the other hand is much more important. It is used for in the `userena` app that, amongst other things, sends activation e-mails to your users. As you may know, these e-mails contain an activation link that your users have to follow in order to activate their accounts.

But how does Pony Forum know which site the link points to? You guessed it, it uses the `domain` defined by `definesite.py`.

If you need to change these two fields---for instance, if you were to give your forum a better-looking URL---you will need to change the `domain` field. This can be done at `/admin/sites/site/1/`.

### Setting Up an E-Mail Server ###
*Speakiiing* of activation e-mails, you need to, you know, send e-mails. "Jesus &"Â¤!#! Christ!" you think to yourself, but if you use a Gmail account, it's all actually quite easy! (I was surprised, too.)

Using [sontek's intelligible guide](http://sontek.net/using-gmail-to-send-e-mails-from-django), if you use a Gmail e-mail account, you can define your own e-mail server by including this part in your `settings.py` file:

    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = 'user@gmail.com'
    EMAIL_HOST_PASSWORD = 'password'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True

*However!* Putting this kind of configuration information in a file that may end up in a publically viewable place is not adviseable. Instead, follow [DotCloud's guide to environmental variables](http://docs.dotcloud.com/guides/environment/) and, instead, enter the information like environment variables like so:

    dotcloud var set ponyforum EMAIL_HOST=smtp.gmail.com
    dotcloud var set ponyforum EMAIL_HOST_USER=your_user_name@gmail.com
    dotcloud var set ponyforum EMAIL_HOST_PASSWORD=your_password
    dotcloud var set ponyforum EMAIL_PORT=587
    dotcloud var set ponyforum EMAIL_USE_TLS=True

If you want to, you can also do it like this on some operating systems:

    dotcloud var set ponyforum \
        'EMAIL_HOST=smtp.gmail.com' \
        'EMAIL_HOST_USER=your_user_name@gmail.com' \
        'EMAIL_HOST_PASSWORD=your_password' \
        'EMAIL_PORT=587' \
        'EMAIL_USE_TLS=True'

I think the last one is the easiest one, but choose whichever you prefer.

All environment variables can be viewed with

    dotcloud var list ponyforum
    
This should set up your e-mail server. At any point, you can alter the values by the approaches above. You can remove any erroneous environment variables entirely using

    dotcloud var unset ponyforum EMAIL_HOST_PASSWORD

Obviously, you need to change the `USER` and `PASSWORD` fields to your own. Also note that if you are using Google's [two-factor authentication](https://accounts.google.com/SmsAuthConfig), you default password will not work, because you need to create a designated application password for it [here](https://accounts.google.com/IssuedAuthSubTokens). The reason is that if you use two-factor authentication, you will not use the password for your actual account outside of Google's own sites, but an application password. The advantage of this is that you can remove this application in your Google account settings right away, if you accidentally share it through GitHub or elsewhere.

This is a much better security solution, because it is much easier to shut down a compromised application password by just removing it in your account settings than replacing your general password and playing cat and mouse with any potential hacker, as well as trying to recall your mother's middle name. If you aren't already using two-factor authentication, I urge you to do it to improve your Google and Gmail security significantly. Not because of Pony Forum, but the general security advantages it affods you. 

After you have changed and saved your new settings in `settings.py`, run the `dotcloud push ponyforum` command again, and your new settings will be (derp) pushed to your instance. If nothing happens, follow it up with the command `dotcloud restart ponyforum.www`.

### DEBUG = True or False? ###
While you're still in `settings.py`, you might consider changing the value of DEBUG, whether it is set to `True` or `False`.

It all depends on where you are in your development cycle, but remember to flip it off, once you open it to the public---and on, if you are testing your site.

Set it to `True`, if you are customizing it yourself, but set it to `False`, once you launch your site.

### Aaand You're Done! ###
Let's recapitulate the adjustments needed to set up Pony Forum:

1. Clone, create, push.
2. Set up your e-mail server.
3. Change the default admin `"password"` password.
4. Check that your defined site name and domain match your intended name and used URL.
5. Evaluate whether Django's debug mode should be on of off.

Boom! You're done.

License
-------
*(To be decided. As long as you don't sell the code as-is nor in any altered form, you're probably good.)*

To-Do List
----------
Fire up [some music][music] and let's take a look at what I hope to get to at some point.

I want to implement Markdown footnotes, but as of now, they get identical anchor IDs, which breaks the links (since they all point to the same). I hope to find something that will work in the end, because I regard this as a very important feature to a forum that encourages long-form discussion.

1. Polish registration/accounts/settings
    * Settings view and template
2. Subscriptions
3. Bookmarks/saves views and templates
4. Bans
5. Avatars
6. Moderator management interface w/ back-end
7. Better report system

* Consolidate POST templates (and templates?) to fewer
    * Throw moderation-based templates in a separate folder
    * Rename prepend `_` to `_base.html` and `_page.html`?
    
* UTC-based datetimes (wait for [Django 1.4][timezones]))

* CSS
    * General
    * [Mobile][mobile]
    * Print

* Maintenance
    * Unit testing
    * [Logging][logging]

* Registration
    * Finite log-in attempts
    * Invitation-based sign-up

### Eventual, Not Impending, Features ###
* Thread polls
* Spoiler code

* Moderation and special access
    * Moderation action tracker
    * Members-only threads, categories, and forums
    * Threadmins and moderator groups

* Embedding
    * [Gist][gist]
    * [Tweets][tweets]

* [Localization][local]

### Features Under Consideration ###
* [Search][search]
* Formatting buttons
* Syntax highlighting
* Post edit time stamps
* [Markdown Video][video]
* Post and thread drafts
    * HTML5 storage?
* [LaTeX/MathML support][latex-mathml]
* E-mail check with [better regex][+filters]. (Section 3.)

And much, much more.

* * * * *

**1:** This has been disabled for the time being.

[music]:        http://soundcloud.com/pluxemburg/first-floor-power-to-do-list-akamu-remix
[timezones]:    https://docs.djangoproject.com/en/dev/topics/i18n/timezones/#time-zones
[mobile]:       https://github.com/ndarville/dotcloud-django/tree/adaptive
[logging]:      http://packages.python.org/Logbook/
[gist]:         https://github.com/blog/122-embedded-gists
[tweets]:       https://dev.twitter.com/docs/embedded-tweets
[local]:        https://docs.djangoproject.com/en/1.4/topics/i18n/com/en/dev/topics/i18n/formatting/
[search]:       http://ericholscher.com/blog/2009/nov/2/large-problems-django-mostly-solved/
[video]:        http://code.google.com/p/python-markdown-video/
[latex-mathml]: http://mathjax.org
[+filters]:     https://tools.ietf.org/html/rfc3696